@startuml User

title MongoDB User Model

class Person {
    # name: Name
    # phone: Phone
    # email: Email
    # thumbnail: string
    # userNotes: Note[]
    # admNotes: Note[]
}

class Client {
    # password: Password
    # roles
}

' class User implements Client
class User {
    # jwt
    + setCookies(c: Context): void
    + register(): Promise<User>
    + loginJWT(): Promise<string>
    + validateJWT(token: string): Promise<boolean>
}

' class Supplier implements Client
class Supplier {
    + webpage: Link
    + description: Description
}

' :: TINY OBJECTS ::

class Password {
    - password: string
    + validLength(password: string): boolean
    + encrypt(password: string): Promise<string>
    + set(password: string)
    + validate(userInput: string): Boolean
}

class Role {
    - role: Map<string, number>
    + getOne(name)
    + setOne(role: Map<string, number>)
}

class Name {
    - names: string[]
    - alias: string
    + get(): string
    + getOne(i): string
    + findOne(query): string
    + getAlias(): string
    + set(fullName): string
    + add(name): string
    + setAlias(alias): string
}

class Phone {
    - country: string
    - number: string
    + get()
    + set(country: string, number: string)
}

class Email {
    - email
    + validate(email: string)
    + get()
    + set(email: string)
}

class Password {
    - password
    + validLength(password: string): boolean
    + encrypt(password: string): Promise<string>
    + validate(userInput: string): Promise<boolean>
    + set(newPassword: string): void
}

class Description {
    - body: string
    - timestamp: Date
    - validate(description: Description): boolean
    + get()
    + set(description: Description)
}

class Thumbnail {
    - link: string
    - timestamp: Date
    - validate(thumbnail: Thumbnail): boolean
    + get()
    + set(thumbnail: Thumbnail)
}

class Note {
    - tags: string[]
    - body: string
    - timestamp: Date
    - validate(email: Email)
    + get()
    + set(email: Email)
}

class Link {
    - link
    - validate(link: string): boolean
    + get()
    + set(link: string)
}

' Inherit (interfaces). Person <|.r. Client
' For classes, remember:
' ClasePadre <|-- ClaseHija
Client <|-- User
Person <|-- Client
User <|-- Supplier

' Composition
Person *--> Name
Person *--> Phone
Person *--> Email
Person *--> Thumbnail
Person *--> Note
Client *--> Password
Client *--> Role
Supplier *..> Link
Supplier *..> Description

' Notes
note top of Client
test
endnote

@enduml